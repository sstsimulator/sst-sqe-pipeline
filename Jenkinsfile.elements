@Library('SPiFI-1.2.1') _

properties([
    [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false], 
    parameters([
        booleanParam(defaultValue: true, description: 'Download artifacts?', name: 'P_DOWNLOAD_ARTIFACTS'),
        booleanParam(defaultValue: false, description: 'Clean src dir?', name: 'P_CLEAN'),
        booleanParam(defaultValue: true, description: 'Configure?', name: 'P_CONFIGURE'),
        booleanParam(defaultValue: true, description: 'Build?', name: 'P_BUILD'),
        booleanParam(defaultValue: true, description: 'Install?', name: 'P_INSTALL'),
        booleanParam(defaultValue: true, description: 'Upload artifacts?', name: 'P_UPLOAD_ARTIFACTS'),
        booleanParam(defaultValue: true, description: 'Run Tests?', name: 'P_RUN_TESTS'),
        booleanParam(defaultValue: true, description: 'Run Static Code Analysis?', name: 'P_RUN_ANALYSIS'),
        booleanParam(defaultValue: true, description: 'Deploy Artifacts?', name: 'P_DEPLOY')]),
        //[$class: 'EnvInjectJobProperty', 
        //    info: [loadFilesFromMaster: false, secureGroovyScript: [classpath: [], sandbox: true, script: '']],
        //    keepBuildVariables: true, 
        //    keepJenkinsSystemVariables: true, 
        //    on: true]
])

node("${params.NODE_LABEL}") {
    //TODO: This needs to accept parameters and setup/load accordingly
    //TODO: Use a package manager instead of modules?
    withEnv(["INSTALL_DIR=$WORKSPACE/sst-elements-install",
            "SST_CORE_MODULES=${params.SST_CORE_MODULES}",
            "SST_CORE_INSTALL=${params.SST_CORE_INSTALL}",
            "PATH=$PATH:${params.SST_CORE_INSTALL}/bin"]) {
        stage('Cloning') {
            if (params.P_CLEAN) {
                sh 'rm -rf sst-elements; rm -rf sst-elements-install'
            }
            sh 'alias; echo PATH=$PATH; echo SST_CORE_INSTALL=$SST_CORE_INSTALL; ls $SST_CORE_INSTALL'
            String[] sstsimulatorRepos = ['sst-elements']
            String[] sstsimulatorBranches = ['devel']
            def git_helper = new gov.sandia.sems.spifi.Git()

            sstsimulatorRepos.eachWithIndex {repo, i ->
                println "Cloning: $repo:" + sstsimulatorBranches[i]
                git_helper.clone(env: this,
                                dir: repo,
                                url: "https://github.com/sstsimulator/" + repo + ".git",
                                branch: sstsimulatorBranches[i],
                                retries: 3,
                                retry_delay: 30,
                                timeout: 30,
                                timeout_units: "MINUTES",
                                verbose: true)    
            }
        }
        stage('Download artifacts') {
            if (params.P_DOWNLOAD_ARTIFACTS) {
            //    //TODO
            }
        }
        stage('Configure') {
            if (params.P_CONFIGURE) {
                //def shell = new gov.sandia.sems.spifi.Shell()
                //def output = shell.execute(env: this,
                //                            command: "eval $SST_CORE_MODULES; " +
                //                                    "cd sst-elements; ./autogen.sh; " +
                //                                    "mkdir -p $INSTALL_DIR; " +
                //                                    "./configure --prefix=$INSTALL_DIR",
                //                            verbose: true)
                //println "Shell Output:\n" +
                //"- status: ${output.status}\n" +
                //"- stdout: ${output.stdout}\n"
                sh '''
                    eval $SST_CORE_MODULES
                    cd sst-elements
                    env PATH=$PATH ./autogen.sh
                    mkdir -p $INSTALL_DIR; ./configure --prefix=$INSTALL_DIR
                    '''
            }
        }
        stage('Build') {
            if (params.P_BUILD) {
                sh '''
                    eval $SST_CORE_MODULES
                    cd sst-elements
                    make -j4
                    '''
            }
        }
        stage('Install') {
            if (params.P_INSTALL) {
                //TODO: use SPiFI shell command
                sh '''
                    eval $SST_CORE_MODULES
                    cd sst-elements
                    make -j4 install
                    echo "INSTALL_DIR=$INSTALL_DIR"
                    ls -lat $INSTALL_DIR
                    '''
            }
        }
        stage('Upload artifacts') {
            if (params.P_UPLOAD_ARTIFACTS) {
                //TODO
                //echo '[STATUS]: archiving artifacts...'
                //archiveArtifacts artifacts: 'sst-elements/src/sst/core/*.o, sst-elements/src/sst/core/**/*.o, sst-elements/src/sst/core/libltdl/.libs/*.a', fingerprint: true
            }
        }
        stage('Test') {
            if (params.P_RUN_TESTS) {
                echo 'Testing...'
                //sh 'cd sst-elements; ./src/sst/core/sstunit -ojunit || true'
                //junit 'sst-elements/*.xml'
            }
        }
        stage('Analyse') {
            if (params.P_RUN_ANALYSIS) {
                echo 'Static Analysis...'
            }
        }
        stage('Deploy') {
            if (params.P_DEPLOY) {
                echo 'Deploying....'
                //TODO
            }
        }
    }
}
