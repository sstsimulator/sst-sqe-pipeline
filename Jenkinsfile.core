@Library('SPiFI-1.2.1') _

properties([
    [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false], 
    parameters([
        booleanParam(defaultValue: true, description: 'Run Tests?', name: 'RUN_TESTS'),
        booleanParam(defaultValue: true, description: 'Run Static Code Analysis?', name: 'RUN_ANALYSIS'),
        booleanParam(defaultValue: true, description: 'Deploy Artifacts?', name: 'DEPLOY')]),
        [$class: 'EnvInjectJobProperty', 
            info: [loadFilesFromMaster: false, secureGroovyScript: [classpath: [], sandbox: true, script: '']],
            keepBuildVariables: true, 
            keepJenkinsSystemVariables: true, 
            on: true]
])


node("sstresource&&baserhel8") {
    environment {
        //TODO: This needs to accept parameters and setup/load accordingly
        //TODO: Use a package manager instead of modules?
        SST_CORE_MODULES = ""
        INSTALL_DIR = ""
    }
    withEnv(["INSTALL_DIR=$WORKSPACE/sst-core-installs/$BUILD_NUMBER", 
"SST_CORE_MODULES=module load mpi/openmpi-2.1.3; module load glpk/glpk-4.54; module load metis/metis-5.1.0"]) {
        stage('Cloning') {
            String[] sstsimulatorRepos = ['sst-core']
            String[] sstsimulatorBranches = ['devel']
            def git_helper = new gov.sandia.sems.spifi.Git()

            sstsimulatorRepos.eachWithIndex {repo, i ->
                println "Cloning: $repo:" + sstsimulatorBranches[i]
                git_helper.clone(env: this,
                                dir: repo,
                                url: "https://github.com/sstsimulator/" + repo + ".git",
                                branch: sstsimulatorBranches[i],
                                retries: 3,
                                retry_delay: 30,
                                timeout: 30,
                                timeout_units: "MINUTES",
                                verbose: true)    
            }
        }
        stage('Configure') {
                //echo '[STATUS]: Configuring...'
                //TODO: Export modules for ALL stages
                //INSTALL_DIR="$PWD/sst-core-installs/$BUILD_NUMBER"
                sh '''
                    eval $SST_CORE_MODULES
                    cd sst-core
                    env PATH=$PATH ./autogen.sh
                    mkdir -p $INSTALL_DIR; ./configure --prefix=$INSTALL_DIR
                    '''
                //echo '[STATUS]: archiving artifacts...'
                //archiveArtifacts artifacts: 'sst-core/src/sst/core/*.o, sst-core/src/sst/core/**/*.o, sst-core/src/sst/core/libltdl/.libs/*.a', fingerprint: true
        }
        stage('Build') {
            sh '''
                eval $SST_CORE_MODULES
                cd sst-core
                make -j4 install
                ls -lat
                '''
        }
        stage('Test') {
            if (env.RUN_TESTS) {
                echo 'Testing...'
            }
            //sh 'cd sst-core; ./src/sst/core/sstunit -ojunit || true'
            //junit 'sst-core/*.xml'
        }
        stage('Creating parallel sub-jobs and running tests') {
            String[] sstsimulatorRepos = ['sst-elements', 'sst-macro', 'sst-external-element', 'juno', 'balar']
            String[] purdueaalpRepos = ['sst-gpgpusim-external']
            def launcher = new gov.sandia.sems.spifi.JobLauncher(this)

            sstsimulatorRepos.eachWithIndex {repo, i ->
                launcher.appendJob(label: repo, job_name: "$JOB_NAME" + "-" + repo, dry_run: true, dry_run_status: true)
            }
            purdueaalpRepos.eachWithIndex {repo, i ->
                launcher.appendJob(label: repo, job_name: "$JOB_NAME" + "-" + repo, dry_run: true, dry_run_status: true)
            }
            
            launcher.printJobList()
            println "lost control"
            
            //launcher.launchInParallel()
            println "got control back"
            
            //def summary = launcher.getLastResultSummary()
            //def results_util = new gov.sandia.sems.spifi.ResultsUtility(env: this)
            
            //println results_util.genResultSummaryTable(format: "ASCII", summary: summary)

            //if(summary.NUMJOBS != summary.NUMSUCCESS) {
            //    currentBuild.result = 'FAILURE'
            //    return
            //} 
        }
        stage('Blocking for results') {

        }
        stage('Analyse') {
            if (env.RUN_ANALYSIS) {
                echo 'Static Analysis...'
            }
        }
        stage('Deploy') {
            if (env.DEPLOY) {
                echo 'Deploying....'
                //sh 'make install'
            }
        }
    }
}
